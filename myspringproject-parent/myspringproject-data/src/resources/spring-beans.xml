
<!-- Setting up JPA repositories using the namespace -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	
	<!-- Using this element looks up Spring Data repositories as described in Section 1.3.3,
	 “Creating repository instances”. Beyond that it activates persistence exception translation for all 
	 beans annotated with @Repository to let exceptions being thrown by the JPA presistence providers be 
	 converted into Spring's DataAccessException hierarchy. -->
	<jpa:repositories base-package="com.javanoob.myspringproject.data"/>
	
	<!-- Simple implementation of the standard JDBC DataSource interface, configuring the plain old JDBC DriverManager
	 via bean properties, and returning a new Connection from every getConnection call.

	NOTE: This class is not an actual connection pool; it does not actually pool Connections. 
	It just serves as simple replacement for a full-blown connection pool, implementing the same standard interface, 
	but creating new Connections on every call.
 	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost/schl_regs"/>
		<property name="username" value="ruel"/>
		<property name="password" value="javanoob"/>
	</bean>
	
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true"/>
		<property name="generateDdl" value="true"/>
		<property name="database" value="MYSQL"/>
	</bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
		<!-- spring based scanning for entity classes -->
		<property name="packagesToScan" value="com.javanoob.myspringproject.data"/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"/>
</beans>